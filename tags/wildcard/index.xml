<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>개발 저장소</title>
    <link>http://durtchrt.github.io/blog/tags/wildcard/index.xml</link>
    <description>Recent content on 개발 저장소</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>durtchrt</copyright>
    <atom:link href="http://durtchrt.github.io/blog/tags/wildcard/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>자바 제네릭스(12) Java Generics: 상위 제한된 와일드카드(Upper Bounded Wildcards)</title>
      <link>http://durtchrt.github.io/blog/java/generics/12/</link>
      <pubDate>Mon, 07 Nov 2016 13:00:42 +0900</pubDate>
      
      <guid>http://durtchrt.github.io/blog/java/generics/12/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/generics/unboundedWildcards.html&#34;&gt;원문링크&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;제한없는-와일드카드-unbounded-wildcards&#34;&gt;제한없는 와일드카드 &lt;code&gt;Unbounded Wildcards&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;제한없는 와일드카드 타입은 와일드카드 문자(&amp;lsquo;?&amp;rsquo;)만 사용한것이다. 예를 들면 List&amp;lt;?&amp;gt;와 같다. List&amp;lt;?&amp;gt;의 ?는 List의 &amp;lsquo;알수없는 타입(unkown type)&amp;lsquo;이라고 부른다. 아래 두개의 시나리오는 제한없는 와일드카드가 유용한 접근법이다.
&lt;code&gt;The unbounded wildcard type is specified using the wildcard character (?), for example, List&amp;lt;?&amp;gt;. This is called a list of unknown type. There are two scenarios where an unbounded wildcard is a useful approach:&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Object 클래스에서 제공하는 기능(메서드)을 사용하도록 메서드를 구현할 때.
&lt;code&gt;- If you are writing a method that can be implemented using functionality provided in the Object class.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;코드가 generic 클래스에서 메서드가 타입매개변수에 의존적이지 않게 작성하고 싶을 때.(예 List.size나 List.clear). 사실, Class&amp;lt;T&amp;gt; 클래스는 범위없는 와일드카드를 자주 사용한다.(Class&amp;lt;T&amp;gt;의 메서드가 T에 의존적으로 동작하지 않게 만들기 위해)
&lt;code&gt;- When the code is using methods in the generic class that don&#39;t depend on the type parameter. For example, List.size or List.clear. In fact, Class&amp;lt;?&amp;gt; is so often used because most of the methods in Class&amp;lt;T&amp;gt; do not depend on T.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;printList 메서드를 살펴보자.
&lt;code&gt;Consider the following method, printList:&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void printList(List&amp;lt;Object&amp;gt; list) {
    for (Object elem : list)
        System.out.println(elem + &amp;quot; &amp;quot;); // elem.toString() 자동으로 호출됨.
    System.out.println();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;printList는 List가 가진 객체가 어떤 타입이든간에 상관없이 print하고 싶어한다. 하지만 List 객체는 Object 타입의 객체만 출력할 수 있다. (참조:&lt;a href=&#34;../8&#34;&gt;제네릭스, 상속, 서브타입&lt;/a&gt;) List&amp;lt;Object&amp;gt;는 List&amp;lt;Integer&amp;gt;, List&amp;lt;String&amp;gt;, List&amp;lt;Double&amp;gt;을 출력할 수 없다. 왜냐하면 List&amp;lt;Object&amp;gt; 타입의 stub type(스텁타입 용어 아시는분 공유 부탁요 ㅠㅠ)이 아니다. 아래는 List&amp;lt;?&amp;gt;를 사용해서 generic 메서드인 printList를 작성한 예이다..&lt;/p&gt;

&lt;p&gt;&lt;code&gt;The goal of printList is to print a list of any type, but it fails to achieve that goal — it prints only a list of Object instances; it cannot print List&amp;lt;Integer&amp;gt;, List&amp;lt;String&amp;gt;, List&amp;lt;Double&amp;gt;, and so on, because they are not subtypes of List&amp;lt;Object&amp;gt;. To write a generic printList method, use List&amp;lt;?&amp;gt;:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(역자 추가 - 위의 예가 설명하는 코드 - 컴파일 에러 발생)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;Integer&amp;gt; integerList = Arrays.asList(1,2);
printList(integerList);   // 컴파일 에러
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void printList(List&amp;lt;?&amp;gt; list) {
    for (Object elem: list)
        System.out.print(elem + &amp;quot; &amp;quot;);
    System.out.println();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;아무 타입을 A로 지칭했을때, List&amp;lt;?&amp;gt;의 서브타입은 List&amp;lt;A&amp;gt;이 성립이 되기 때문에, printList 메서드가 모든 타입을 대상으로 print할 수 있다.
&lt;code&gt;Because for any concrete type A, List&amp;lt;A&amp;gt; is a subtype of List&amp;lt;?&amp;gt;, you can use printList to print a list of any type:&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;Integer&amp;gt; li = Arrays.asList(1, 2, 3);
List&amp;lt;String&amp;gt;  ls = Arrays.asList(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;);
printList(li);
printList(ls);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;참고: Arrays.asList 메서드는 범위없는 와일드카드를 사용해서 구현되었다. Arrays.asList라는 static 팩토리 메서드는 배열을 구체화하여 변경하고(요소들의 공통 타입을 타입추론)  고정된 사이즈의 리스트를 반환한다.
&lt;code&gt;Note: The Arrays.asList method is used in examples throughout this lesson. This static factory method converts the specified array and returns a fixed-size list.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(중요!)List&lt;Object&gt;와 List&amp;lt;?&amp;gt;과 다르다. List&lt;Object&gt;에 Object 타입이나 Object의 서브타입을 insert할 수 있다. 하지만 List&amp;lt;?&amp;gt;에는 null만 insert할 수 있다.(하고자하는 말이 무언지 이해가 안된다;;;) 와일드카드 사용 섹션은은 상황별 어떤 와일드카드를 사용할지 결정에 대한 가이드라인을 제공한다.
&lt;code&gt;It&#39;s important to note that List&amp;lt;Object&amp;gt; and List&amp;lt;?&amp;gt; are not the same. You can insert an Object, or any subtype of Object, into a List&amp;lt;Object&amp;gt;. But you can only insert null into a List&amp;lt;?&amp;gt;. The Guidelines for Wildcard Use section has more information on how to determine what kind of wildcard, if any, should be used in a given situation.&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>