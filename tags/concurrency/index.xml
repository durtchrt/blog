<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>개발 저장소</title>
    <link>http://durtchrt.github.io/blog/tags/concurrency/index.xml</link>
    <description>Recent content on 개발 저장소</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>durtchrt</copyright>
    <atom:link href="http://durtchrt.github.io/blog/tags/concurrency/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[발번역]The Java™ Tutorials - 2-2. Pausing Execution with Sleep</title>
      <link>http://durtchrt.github.io/blog/java/concurrency/5/</link>
      <pubDate>Thu, 24 Nov 2016 15:00:35 +0900</pubDate>
      
      <guid>http://durtchrt.github.io/blog/java/concurrency/5/</guid>
      <description>

&lt;h2 id=&#34;원문링크-http-docs-oracle-com-javase-tutorial-essential-concurrency-sleep-html&#34;&gt;&lt;a href=&#34;http://docs.oracle.com/javase/tutorial/essential/concurrency/sleep.html&#34;&gt;원문링크&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;sleep으로-실행-중지하기&#34;&gt;Sleep으로 실행 중지하기&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Pausing Execution with Sleep&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Thread.sleep은 현재 실행하는 쓰레드를 정해진 시간만큼 실행을 중지한다. 컴퓨터에서 동작하는 어플리케이션의 프로세서의 시간을 효율적으로 만든다. sleep 메서드는 아래 예제처럼 다른 스레드들간에 동일한 간격(4초)으로 실행하게 하는데 사용하거나 다음 섹션에 SimpleThreads처럼 다른 스레드를 기다리게할 수 있다.
&lt;code&gt;Thread.sleep causes the current thread to suspend execution for a specified period. This is an efficient means of making processor time available to the other threads of an application or other applications that might be running on a computer system. The sleep method can also be used for pacing, as shown in the example that follows, and waiting for another thread with duties that are understood to have time requirements, as with the SimpleThreads example in a later section.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;두가지 오버로드 버전 sleep 제공: 하나는 sleep 시간을 밀리초(ms)로, 다른 하나는 나노초(ns)로 명시햇다. 하지만 sleep되는 시간은 완벽하게는 보장되지 않는다. 왜냐하면 OS단에서 제공하는 기능 제약 때문이다. 또한 sleep 시간은 나중에 나올 섹션에 볼 수 있듯이 인터럽트에 의해 종료될수 있습니다.  어쨌든, sleep을 호출해서 설정한 시간을 완벽히 스레드가 정지한다고 확신 할 수 없다.
&lt;code&gt;Two overloaded versions of sleep are provided: one that specifies the sleep time to the millisecond and one that specifies the sleep time to the nanosecond. However, these sleep times are not guaranteed to be precise, because they are limited by the facilities provided by the underlying OS. Also, the sleep period can be terminated by interrupts, as we&#39;ll see in a later section. In any case, you cannot assume that invoking sleep will suspend the thread for precisely the time period specified.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SleepMessage 예제는 4초 간격으로 메세지를 프린트하려 sleep 메서드를 사용한다.
&lt;code&gt;The SleepMessages example uses sleep to print messages at four-second intervals:&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class SleepMessages {
    public static void main(String args[])
        throws InterruptedException {
        String importantInfo[] = {
            &amp;quot;Mares eat oats&amp;quot;,
            &amp;quot;Does eat oats&amp;quot;,
            &amp;quot;Little lambs eat ivy&amp;quot;,
            &amp;quot;A kid will eat ivy too&amp;quot;
        };

        for (int i = 0;
             i &amp;lt; importantInfo.length;
             i++) {
            //Pause for 4 seconds
            Thread.sleep(4000);
            //Print a message
            System.out.println(importantInfo[i]);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main 메서드는  InterruptedException을 throws 한다. 현재 실행되는 쓰레드가 sleep하는 동안 다른 쓰레드가 인터럽트를하면 sleep 메서드가 throws하는 예외입니다. 이 어플리케이션은 다른 쓰레드를 인터럽트하지 않기 때문에  InterruptedException이 발생하지 않습니다.
&lt;code&gt;Notice that main declares that it throws InterruptedException. This is an exception that sleep throws when another thread interrupts the current thread while sleep is active. Since this application has not defined another thread to cause the interrupt, it doesn&#39;t bother to catch InterruptedException.&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[발번역]The Java™ Tutorials - 2-1. 쓰레드 정의와 시작 Defining and Starting a Thread</title>
      <link>http://durtchrt.github.io/blog/java/concurrency/4/</link>
      <pubDate>Thu, 24 Nov 2016 14:00:35 +0900</pubDate>
      
      <guid>http://durtchrt.github.io/blog/java/concurrency/4/</guid>
      <description>

&lt;h2 id=&#34;원문링크-http-docs-oracle-com-javase-tutorial-essential-concurrency-runthread-html&#34;&gt;&lt;a href=&#34;http://docs.oracle.com/javase/tutorial/essential/concurrency/runthread.html&#34;&gt;원문링크&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;쓰레드-정의와-시작&#34;&gt;쓰레드 정의와 시작&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Defining and Starting a Thread&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;쓰레드의 인스턴스를 생성하는 응용프로그램은 반드시 쓰레드에 run 메서드 코드를 제공해야합니다. 이는 두가지 방법이 있습니다.
&lt;code&gt;An application that creates an instance of Thread must provide the code that will run in that thread. There are two ways to do this:&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Runnable 객체 제공&lt;/code&gt; Runnable 인터페이스는 쓰레드에서 실행하는 코드를 포함하는 단일 메서드 run을 정의합니다. 이 Runnable 객체는 쓰레드 생성자에 인자로 전달됩니다. HelloRunnable 예제 참조
&lt;code&gt;Provide a Runnable object. The Runnable interface defines a single method, run, meant to contain the code executed in the thread. The Runnable object is passed to the Thread constructor, as in the HelloRunnable example:&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class HelloRunnable implements Runnable {

public void run() {
    System.out.println(&amp;quot;Hello from a thread!&amp;quot;);
}

public static void main(String args[]) {
    (new Thread(new HelloRunnable())).start();
}

}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;서브클래스 쓰레드&lt;/code&gt; 쓰레드 클래스는 스스로 Runnable 인터페이스를 구현함에도 불구하고 run 메서드는 (main 메서드안에) 없습니다 어플리케이션은 HelloThread 예제처럼 자신의 run 메서드 구현체를 제공하여 Thread의 서브클래스화 할 수 있습니다.(Thread의 서브 클래스이므로 Thread로 동작 가능해짐.)
&lt;code&gt;Subclass Thread. The Thread class itself implements Runnable, though its run method does nothing. An application can subclass Thread, providing its own implementation of run, as in the HelloThread example:&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class HelloThread extends Thread {

public void run() {
    System.out.println(&amp;quot;Hello from a thread!&amp;quot;);
}

public static void main(String args[]) {
    (new HelloThread()).start();
}

}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;두 예제는 새 스레드를 시작하기위해 Thread.start를 호출한다.
&lt;code&gt;Notice that both examples invoke Thread.start in order to start the new thread.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;두 용례중 어느것을 사용하겠습니까? 첫번째 용례 Runnable 객체를 사용하는 것이 더 일반적이다 왜냐하면 Runnable 객체는 Thread가아닌 다른 클래스를 서브클래스화 할 수 있습니다. 두번째 용례는 간단한 응용프로그램에서 사용하기 쉽지만 태스크 클래스가 Thread의 하위 클래스여하는 제한이 있습니다. 이 수업에서는 실행하는 태스크인 Thread 객체로부터 Runnable 태스크를 분리하는 것에 초점을 두고있습니다. 이 방법은 더 유연하고 나중에 다를 고수준 쓰레드 관리 API에 적용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Which of these idioms should you use? The first idiom, which employs a Runnable object, is more general, because the Runnable object can subclass a class other than Thread. The second idiom is easier to use in simple applications, but is limited by the fact that your task class must be a descendant of Thread. This lesson focuses on the first approach, which separates the Runnable task from the Thread object that executes the task. Not only is this approach more flexible, but it is applicable to the high-level thread management APIs covered later.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;쓰레드 클래스는 쓰레드 관리를 위해 쓸만한 메서드들을 정의했다. 이는 쓰레드에대한 정보나 쓰레드의 상태에 영향에 대한 정적 메서들를 제공한다.(???? - the thread invoking the method.) 다른 메서드들은 다른 쓰레드로부터 호출됩니다.(쓰레드와 쓰레드 객체를 관리하는데 관련된) 우리는 이러한 메서드들을 다음 세션에서 검토할 것이다.
&lt;code&gt;The Thread class defines a number of methods useful for thread management. These include static methods, which provide information about, or affect the status of, the thread invoking the method. The other methods are invoked from other threads involved in managing the thread and Thread object. We&#39;ll examine some of these methods in the following sections.&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[발번역]The Java™ Tutorials - 2. Thread Objects</title>
      <link>http://durtchrt.github.io/blog/java/concurrency/3/</link>
      <pubDate>Thu, 24 Nov 2016 13:00:35 +0900</pubDate>
      
      <guid>http://durtchrt.github.io/blog/java/concurrency/3/</guid>
      <description>

&lt;h2 id=&#34;원문링크-http-docs-oracle-com-javase-tutorial-essential-concurrency-threads-html&#34;&gt;&lt;a href=&#34;http://docs.oracle.com/javase/tutorial/essential/concurrency/threads.html&#34;&gt;원문링크&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;쓰레드-객체&#34;&gt;쓰레드 객체&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Thread Objects&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;쓰레드마다 클래스 쓰레드의 인스턴스와 연관되어있다. 병행 어플리케이션을 만드는 쓰레드 객체를 사용하기 위해서는 두가지 전략이 있다.
&lt;code&gt;Each thread is associated with an instance of the class Thread. There are two basic strategies for using Thread objects to create a concurrent application.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;직접적으로 쓰레드 생성과 관리를하려면, 어플리케이션이 비동기 태스크를 시작려는 필요할때마다 쓰레드를 인스턴스화합니다. 나머지 어플리케이션으로부터 추상 스레드를 관려하려면, 어플리케이션의 태스크를 executor에 전달하시요. 이 섹션에서는 쓰레드 객체의 사용법을 설명합니다.  Excutor는 고수준 병행 객체와 함께 논의합니다.
&lt;code&gt;To directly control thread creation and management, simply instantiate Thread each time the application needs to initiate an asynchronous task. 
To abstract thread management from the rest of your application, pass the application&#39;s tasks to an executor.
This section documents the use of Thread objects. Executors are discussed with other high-level concurrency objects.&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[발번역]The Java™ Tutorials - 1. Processes and Threads </title>
      <link>http://durtchrt.github.io/blog/java/concurrency/2/</link>
      <pubDate>Thu, 24 Nov 2016 12:00:35 +0900</pubDate>
      
      <guid>http://durtchrt.github.io/blog/java/concurrency/2/</guid>
      <description>

&lt;p&gt;##&lt;a href=&#34;http://docs.oracle.com/javase/tutorial/essential/concurrency/procthread.html&#34;&gt;원문링크&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;프로세스와-쓰레드&#34;&gt;프로세스와 쓰레드&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Processes and Threads&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;병행 프로그래밍에서는 실행의 두개의 기본 개념이 있다(프로세스, 쓰레드). 자바 프로그래밍 언어에서는 병행 프로그래밍은 거의 대부분 쓰레드와 관련있다. 하지만 프로세스 역시 중요하다.
&lt;code&gt;In concurrent programming, there are two basic units of execution: processes and threads. In the Java programming language, concurrent programming is mostly concerned with threads. However, processes are also important.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;컴퓨터 시스템은 일반적으로 많은 활동적인 프로세스와 쓰레드를 가지고 있다. 싱글 코에서는 하나만 동작할 수 있으므로 한순간에는 한 스레드만 동작할 수 있다. (;;;;) 싱글코어는 타임슬라이싱이라고 불리는 OS 기능을 통해 프로세스와 스레드들간에 공유한다.(Processing time for ???)
&lt;code&gt;A computer system normally has many active processes and threads. This is true even in systems that only have a single execution core, and thus only have one thread actually executing at any given moment. Processing time for a single core is shared among processes and threads through an OS feature called time slicing.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;컴퓨터 시스템은 멀티 프로세서 또는  멀티 코어를 가지는건 점점 더 흔해지고 있다. 이건 시스템의  프로세스와 스레드의 병행 실행 능력을 훌륭하게 높여주였다. 하지만 병행성은 멀티프로세서 또는 멀티코어가 아니더라도 싱글코어 시스템에서도 가능하다.
&lt;code&gt;It&#39;s becoming more and more common for computer systems to have multiple processors or processors with multiple execution cores. This greatly enhances a system&#39;s capacity for concurrent execution of processes and threads — but concurrency is possible even on simple systems, without multiple processors or execution cores.&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;프로세스&#34;&gt;프로세스&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Processes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;프로세스는 독립 실행환경을 가졌습니다. 프로세스는 일반적으로 완벽하고, 외부에 노출안되는  런타임 자원의 집합을 제공합니다.(말이 어렵네;;); 개별적으로 각각의 프로세스들은 자신만의 메모리 공간을 가집니다.
&lt;code&gt;A process has a self-contained execution environment. A process generally has a complete, private set of basic run-time resources; in particular, each process has its own memory space.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;프로세스는 프로그램 또는 어플리케이션과 유의어로 종종 인지한다. 하지만 사용자가 단일 어플리케이션처럼 보이는것은 사실 협력적인 프로세스일수 있습니다. 프로스스간에 통신이 잘될려면, OS는 파이프, 소켓 같은 IPC(Inter Process Communication)을 지원한다. IPC는 단순히 동일 시스템내에서 프록세스간의 통신뿐만 아니라 다른 시스템의 프로세스들간에도 사용됩니다.(뭔가 어려움;;)
&lt;code&gt;Processes are often seen as synonymous with programs or applications. However, what the user sees as a single application may in fact be a set of cooperating processes. To facilitate communication between processes, most operating systems support Inter Process Communication (IPC) resources, such as pipes and sockets. IPC is used not just for communication between processes on the same system, but processes on different systems.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;거의 모든 자바 가상머신은 싱글 프로세스로 구현된다. 자바 어플리케이션은 ProcessBuilder 객체를 사용해서 추가 프로세스들을 만들수 있습니다. 멀티프로세스 어플리케이션은 이 수업의 범위를 넘기므로 없습니다.
&lt;code&gt;Most implementations of the Java virtual machine run as a single process. A Java application can create additional processes using a ProcessBuilder object. Multiprocess applications are beyond the scope of this lesson.&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;쓰레드&#34;&gt;쓰레드&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Threads&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;쓰레드는 때때로 가벼운 프로세스(lightwight processes)라고 불린다. 프로세스와 쓰레드는 실행환경을 제공하지만 새로운 프로세스를 생성하는 것보다 스레드를 생성하는게 자원 사용이 적다.
&lt;code&gt;Threads are sometimes called lightweight processes. Both processes and threads provide an execution environment, but creating a new thread requires fewer resources than creating a new process.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;쓰레드는 프로세스 안에 존재한다.(모든 프로세스는 최소한 하나의 스레드를 가진다.) 스레드는 프로세스의 메모리, 열린 파일등을 포함하여 자원을 공유한다. 이건 효과적이지만 잠재적으로 문제가 있습니다.(communication??)
&lt;code&gt;Threads exist within a process — every process has at least one. Threads share the process&#39;s resources, including memory and open files. This makes for efficient, but potentially problematic, communication.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;멀티쓰레드 동작은 자바 플랫폼의 필수적인 특징이다. 모든 어플리케이션은 최소한 하나의 (또는 여러개 )스레드를 가진다.메모리 관리와 시그널 핸들링과 같은 것과 같이 &amp;ldquo;시스템&amp;rdquo; 스레드를 셀 수 있습니다(???). 그러나 어플리케이션 프로그래머의 관점에서 보면 main 쓰레드라고 불리는 하나의 스레드로부터 시작합니다. 이 스레드는 추가 스레드를 생성하는 능력을 가졌다. 다음 섹션에서 설명하겠다.
&lt;code&gt;Multithreaded execution is an essential feature of the Java platform. Every application has at least one thread — or several, if you count &amp;quot;system&amp;quot; threads that do things like memory management and signal handling. But from the application programmer&#39;s point of view, you start with just one thread, called the main thread. This thread has the ability to create additional threads, as we&#39;ll demonstrate in the next section.&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[발번역]The Java™ Tutorials - 0. Concurrency</title>
      <link>http://durtchrt.github.io/blog/java/concurrency/1/</link>
      <pubDate>Thu, 24 Nov 2016 12:00:34 +0900</pubDate>
      
      <guid>http://durtchrt.github.io/blog/java/concurrency/1/</guid>
      <description>

&lt;p&gt;##&lt;a href=&#34;http://docs.oracle.com/javase/tutorial/essential/concurrency/index.html&#34;&gt;원문링크&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;lesson-concurrency&#34;&gt;Lesson: Concurrency&lt;/h1&gt;

&lt;p&gt;컴퓨터는 사용자에게 동일시간에 한가지 이상의 일을 할 수 있도록 시스템이 보장이 되야한다. 컴퓨터 사용자는 워드프로세서 작업을 할 때 다른 어플리케이션이 파일 다운로드, 스트리밍 오디오, 프린터 큐 관리등을 동시에 하는게 당연하사 생각한다. 심지어 하나의 어플레케이션이 한번에 한가지 이상의 동작하는 것을 종종 기대한다. 예를들면 스트리밍 오디오 어플레케이션은 반드시 동시에 네트워크로부터 디지털 오디오 읽기, 압축을 풀기, 재생 관리, 디스플레이 업데이트를 수행한다. 심지어 워드프로세서도 디스플레이 업데이트나 텍스트를 다시 포맷팅하는것이 얼마나 바쁜지 상관없이 키보드의 응답, 마우스 이벤트들의 응답을 대기해야한다. 그러한 것을 할 수 있는 소프트웨어를 병행성(동시성) 소프트웨어라고 알려져있다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Computer users take it for granted that their systems can do more than one thing at a time. They assume that they can continue to work in a word processor, while other applications download files, manage the print queue, and stream audio. Even a single application is often expected to do more than one thing at a time. For example, that streaming audio application must simultaneously read the digital audio off the network, decompress it, manage playback, and update its display. Even the word processor should always be ready to respond to keyboard and mouse events, no matter how busy it is reformatting text or updating the display. Software that can do such things is known as concurrent software.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;자바 플랫폼은 병행 프로그래밍을 지원하도록 (밑바닥부터 끝까지) 설계 되었다. 자바 프로그래밍 언어와 자바 클래스 라이브러리들로 기본 병행성을 지원한다. 자바 플랫폼 5.0 버전부터는 고수준의 concurrency API도 포함되었다. 이번 자바 플랫폼의 수업은 기본 병행 지원과 몇가지 java.util.concurrent 패키지의 수준 API의 요약을 소개한다.
&lt;code&gt;The Java platform is designed from the ground up to support concurrent programming, with basic concurrency support in the Java programming language and the Java class libraries. Since version 5.0, the Java platform has also included high-level concurrency APIs. This lesson introduces the platform&#39;s basic concurrency support and summarizes some of the high-level APIs in the java.util.concurrent packages.&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>